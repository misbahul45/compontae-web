datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  username      String
  password      String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  Comment       Comment[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  slug         String         @unique
  image        String
  published    DateTime       @default(now())
  notification Notification[]

  Comment Comment[]

  @@map("posts")
}

model Comment {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  body     String
  User     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId   String    @db.ObjectId
  post     Post?     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId   String?   @db.ObjectId
  parent   Comment?  @relation("parentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Comment[] @relation("parentChild")
  parentId String?   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Notification {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  toUser    User?   @relation(fields: [userEmail], references: [email], onDelete: NoAction, onUpdate: NoAction)
  userEmail String?
  post      Post?   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}
